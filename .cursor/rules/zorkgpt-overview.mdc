---
description: 
globs: 
alwaysApply: true
---
# ZorkGPT Project Overview

## Core Mission
ZorkGPT is an AI agent system designed to play the classic interactive fiction game "Zork" using Large Language Models (LLMs). The **prime directive** is that the LLM should truly "play" the game - **never hardcode strings for checking** (except validating parser acceptance) or use "fallback" mechanisms when the LLM fails.

## Architecture Philosophy
- **LLM-First Design**: All game reasoning, decision-making, and understanding must come from language models
- **No Hardcoded Logic**: Avoid hardcoded game mechanics, locations, or solutions
- **Genuine AI Play**: The system demonstrates authentic language model capabilities
- **Extended Sessions**: Multi-thousand turn gameplay sessions with continuous learning
- **Adaptive Knowledge**: Real-time knowledge updates during gameplay

## Main Entry Point
The primary entry point is [main.py](mdc:main.py), which creates a `ZorkOrchestrator` instance for extended gameplay sessions. Configuration is centralized in [pyproject.toml](mdc:pyproject.toml) with type-safe loading via [config.py](mdc:config.py).

## System Architecture

### Central Coordinator
**ZorkOrchestrator** ([zork_orchestrator.py](mdc:zork_orchestrator.py)) - Manages extended gameplay sessions (5000+ turns), coordinates all LLM subsystems, handles continuous learning, and manages state export.

### Four-LLM Architecture
- **Agent LM** ([zork_agent.py](mdc:zork_agent.py)): Action generation with knowledge integration
- **Extractor LM** ([hybrid_zork_extractor.py](mdc:hybrid_zork_extractor.py)): Structured + LLM parsing
- **Critic LM** ([zork_critic.py](mdc:zork_critic.py)): Action evaluation with trust tracking
- **Strategy LM** ([zork_strategy_generator.py](mdc:zork_strategy_generator.py)): Continuous knowledge management

### Supporting Systems
- **Game Interface** ([zork_api.py](mdc:zork_api.py)): Subprocess communication with Zork
- **Spatial Intelligence** ([map_graph.py](mdc:map_graph.py)): Confidence-tracked mapping
- **Movement Analysis** ([movement_analyzer.py](mdc:movement_analyzer.py)): Navigation patterns
- **Configuration** ([config.py](mdc:config.py)): Pydantic-based settings from pyproject.toml
- **Logging** ([logger.py](mdc:logger.py)): Structured logging for turn-window analysis

## Key Features

### Extended Gameplay Sessions
- **Duration**: 5000+ turn sessions with persistent knowledge
- **Learning**: Continuous adaptation every 100 turns during play
- **Memory**: Observations tracked across entire sessions
- **State Export**: Real-time monitoring with optional S3 integration

### Adaptive Knowledge System
- **Turn-based Updates**: Knowledge extraction every 100 turns
- **Quality Assessment**: LLM determines update worthiness
- **Intelligent Merging**: Prevents knowledge degradation
- **Strategic Integration**: Insights immediately influence decisions

### Modular LLM Design
Each LLM component has specialized responsibilities and optimized parameters:
- Agent: Creative action generation (temp 0.5)
- Critic: Consistent evaluation (temp 0.2)  
- Extractor: Accurate parsing (temp 0.1)
- Strategy: Strategic synthesis (GPT-4 class models)

## System Flow

### Turn Execution
1. **Context Gathering**: Memory, spatial awareness, strategic guidance
2. **Action Generation**: Agent creates contextually appropriate actions
3. **Evaluation**: Critic assesses action quality with trust tracking
4. **Execution**: Command sent to game with response processing
5. **Information Extraction**: Structured + LLM parsing of response
6. **State Updates**: Memory, map, and tracking updates
7. **Periodic Learning**: Knowledge updates every 100 turns

### Continuous Learning
- **Real-time Analysis**: Knowledge extraction during gameplay
- **Strategy Selection**: LLM chooses analysis approaches
- **Map Integration**: Spatial updates every 25 turns
- **Performance Tracking**: Action reasoning and critic scores

## Data Structures

### Session Memory
- `memory_log_history`: Structured observations across turns
- `action_history`: Previous actions and patterns
- `game_map`: MapGraph with confidence-tracked connections
- `action_reasoning_history`: Decisions and critic scores for analysis

### Knowledge Base
- `knowledgebase.md`: Continuously updated strategic insights
- Turn-window analysis for pattern recognition
- Quality-assessed knowledge with intelligent merging
- Real-time availability for decision-making

## Configuration System

### Structure
- **Primary Config**: All settings in `pyproject.toml` under `[tool.zorkgpt]` sections
- **Security**: Only `CLIENT_API_KEY` in environment variables
- **Type Safety**: Pydantic validation for all configuration
- **Component-Specific**: Separate sampling parameters per LLM

### Key Sections
- `[tool.zorkgpt.llm]`: Model selection and URLs
- `[tool.zorkgpt.agent_sampling]`: Action generation parameters
- `[tool.zorkgpt.critic_sampling]`: Evaluation parameters
- `[tool.zorkgpt.extractor_sampling]`: Parsing parameters
- `[tool.zorkgpt.gameplay]`: Turn delays and thresholds
- `[tool.zorkgpt.orchestrator]`: Session limits and intervals

## Live Monitoring

### State Export
- **Real-time Export**: Current state exported every turn
- **S3 Integration**: Optional cloud storage for live viewing
- **Comprehensive Logs**: JSON and human-readable formats
- **Performance Metrics**: Turn-based analysis without complex rewards
